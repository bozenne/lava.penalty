% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Lava_modelsearch2.R
\name{modelsearch2}
\alias{modelsearch2}
\title{Automatic extension of the lvm}
\usage{
modelsearch2(x, ...)
}
\arguments{
\item{x}{a lvm model}

\item{data}{the dataset used to identify the model}

\item{statistic}{test statistic used to perform the test. Can the likelihood ratio test (LR), the score (score) or the max statistic (max).}

\item{link}{the links to consider when expanding the model}

\item{exclude.var}{see the documentation of \code{\link{findNewLink}}.}

\item{rm.latent_latent}{see the documentation of \code{\link{findNewLink}}.}

\item{rm.endo_endo}{see the documentation of \code{\link{findNewLink}}.}

\item{rm.latent_endo}{see the documentation of \code{\link{findNewLink}}.}

\item{nStep}{the maximum number of links that can be added to the model.}

\item{na.omit}{should model leading to NA for the test statistic be ignored. Otherwise this will stop the selection process.}

\item{alpha}{the significance threshold for retaining a new link}

\item{method.p.adjust}{the method used to adjust the p.values for multiple comparisons. Ignore when using the max statistic.}

\item{display.warnings}{should warnings be display? May occur when dealing with categorical variables or when fitting an extended model.}

\item{trace}{should the execution be traced?}

\item{export.iid}{should the iid decomposition of the retained coefficient be export. Only relevant when statistic is set to max.}
}
\value{
a latent variable model
}
\description{
Add all relevant path between the variables present in a lvm.
}
\examples{
mSim <- lvm()
regression(mSim) <- c(y1,y2,y3)~u
regression(mSim) <- u~x1+x2
categorical(mSim,labels=c("A","B","C")) <- "x2"
latent(mSim) <- ~u
covariance(mSim) <- y1~y2
df <- sim(mSim, 1e2)
df$Id <- 1:NROW(df)

m <- lvm(c(y1,y2,y3)~u)
latent(m) <- ~u
addvar(m) <- ~x1+x2 

e <- estimate(m, df)

## score
resScore <- modelsearch2(e, statistic = "score")
resLR <- modelsearch2(e, statistic = "LR")

e <- estimate(m, df, robust = TRUE, cluster = "Id")
resMax <- modelsearch2(e, rm.endo_endo = TRUE, statistic = "max")
}
