% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Penalty_calcLambda.R
\name{calcLambda}
\alias{calcLambda}
\alias{calcLambda.plvmfit}
\title{Estimate the regularization parameter}
\usage{
calcLambda(x, ...)

\method{calcLambda}{plvmfit}(x, seq_lambda1, data.fit = x$data$model.frame,
  data.test = x$data$model.frame, warmUp = lava.options()$calcLambda$warmUp,
  fit = lava.options()$calcLambda$fit, trace = TRUE, ...)
}
\arguments{
\item{x}{a plvmfit object}

\item{...}{additional arguments - e.g. control argument for estimate.lvm}

\item{seq_lambda1}{the sequence of penalisation paramaters to be used to define the sub model}

\item{data.fit}{the data used to fit the model}

\item{data.test}{the data used to test the model}

\item{warmUp}{should the new model be initialized with the solution of the previous model (i.e. estimated for a different penalization parameter)}

\item{fit}{criterion to decide of the optimal model to retain among the penalized models.}

\item{trace}{shoud the execution of the function be traced}
}
\description{
Find the optimal regularization parameter according to a fit criterion
}
\examples{

set.seed(10)
n <- 300
formula.lvm <- as.formula(paste0("Y~",paste(paste0("X",1:4), collapse = "+")))
mSim <- lvm(formula.lvm)
df.data <- sim(mSim,n)

lvm.model <- lvm(formula.lvm)
plvm.model <- penalize(lvm.model)

res <- estimate(plvm.model, data = df.data, increasing = FALSE, regularizationPath = TRUE)

perf <- calcLambda(res$regularizationPath, res$x, data.fit = df.data)
perf
}
